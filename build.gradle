/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE")
    }
}

plugins {
    id 'net.saliman.cobertura' version '2.3.1'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id "com.moowork.node" version "1.1.0"
    id "org.asciidoctor.convert" version "1.5.3"
}

cobertura {
    coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
    coverageExcludes = ['.*org.kpi.model.*', '.*org.kpi.config.*', '.*org.kpi.Application.*']
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'checkstyle'

ext {
    hibernateCoreVersion = "5.0.12.Final"
    hibernateEntityVersion = "5.0.12.Final"
    mysqlConnectorVersion = "6.0.6"
    springBootVersion = "1.5.3.RELEASE"
    junitVersion = "4.12"
    checkstyleVersion = "8.0"
    sevntuChecksVersion = '1.24.1'
    snippetsDir = file('build/generated-snippets')
}

node {
    version = '6.9.1'
    download = true
    nodeModulesDir = file("src/main/webapp/")
}

task installFeDependencies(type: NpmTask) {
    args = ['install']
}

task buildFrontEnd(type: NpmTask) {
    args = ['run', 'build']
}

buildFrontEnd.dependsOn installFeDependencies

checkstyle {

// In this section you declare where to find the dependencies of your project
    repositories {
        // Use jcenter for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        mavenCentral()
    }

    ignoreFailures = false
    configFile = file("${project.rootDir}/checkstyle.xml")

    checkstyleMain {
        source = sourceSets.main.allSource
    }

    checkstyleMain.exclude '**/static/**'

    configurations {
        checkstyle
    }

 bootRun {
       systemProperty 'spring.config.location', System.properties['spring.config.location']
    }
    dependencies {
        assert project.hasProperty("checkstyleVersion")
        // This dependency is exported to consumers, that is to say found on their compile classpath.
        //api 'org.apache.commons:commons-math3:3.6.1'

        // This dependency is used internally, and not exposed to consumers on their own compile classpath.
        //implementation 'com.google.guava:guava:21.0'

        //compile "org.hibernate:hibernate-core:${hibernateCoreVersion}"
        //compile "org.hibernate:hibernate-entitymanager:${hibernateEntityVersion}"

        compile "mysql:mysql-connector-java:${mysqlConnectorVersion}"

        compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
        compile group: 'net.sourceforge.nekohtml', name: 'nekohtml', version: '1.9.22'


        compile 'io.jsonwebtoken:jjwt:0.7.0'
        compileOnly 'org.projectlombok:lombok:1.16.18'

        //Check style
        checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
        checkstyle "com.github.sevntu-checkstyle:sevntu-checks:${sevntuChecksVersion}"

        // Use JUnit test framework
        testCompile "junit:junit:${junitVersion}"
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.mockito:mockito-core'

        asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:1.2.1.RELEASE'
        testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:1.2.1.RELEASE'
        testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.5.4.RELEASE'
        compile group: 'org.springframework.restdocs', name: 'spring-restdocs-core', version: '1.2.1.RELEASE'
    }

    test{
            exclude 'org/kpi/springmvctest/**'
    }


    task restdoc( type: Test ) {
         include 'org/kpi/springmvctest/**'
         outputs.dir snippetsDir
    }
    asciidoctor {
        inputs.dir snippetsDir
        dependsOn restdoc
    }


    jar {
        dependsOn asciidoctor
            from ("${asciidoctor.outputDir}/html5") {
                into 'static/docs'
        }
    }
    check.dependsOn.remove(restdoc)
}