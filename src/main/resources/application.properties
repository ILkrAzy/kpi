#spring.main.banner-mode=off
# create n drop tables, loads import.sql
# NOTE:
#   - Just use in development mode (be careful with production)
#   - Initialize database statement should be place in import.sql

spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create

# Use to generate schema (create.sql and drop.sql) which can be used for production
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=drop-and-create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/create.sql
#spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=src/main/resources/drop.sql

#spring.datasource.schema=classpath:create.sql

spring.datasource.url=jdbc:mysql://localhost/kpi
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true



# HikariCP settings
# spring.datasource.hikari.*
#60 sec
spring.datasource.hikari.connection-timeout=60000
# max 5
spring.datasource.hikari.maximum-pool-size=5

#Logging
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
logging.level.org.hibernate.SQL=debug
#logging.level.org.hibernate.type.descriptor.sql=trace
logging.level.=error

#Server Configuration
server.port=80

#Security Configuration
security.user.name=user
security.user.password=password
# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder  
# ==============================================================
spring.queries.users-query=select * from user where username=?
spring.queries.roles-query=select u.username, r.role from user u inner join role r on(u.id=r.id) where u.username=?
